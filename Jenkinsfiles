########## Jenkins file for Run build on Agent  #########

pipeline {
  agent {
    label 'Ubuntu'  // Name of the Agent
    }
    stages {
        stage ('Source Code Checkout') {
           git branch: 'Development', 
           url: 'ssh://BitbucketURL'
        }

        stage('Prepare To Scan') {
          steps {
            writeFile file: 'gradle.properties', 
            text: 
            '''
            sonar.projectKey=SignIn-frontend    // Variable As per requirment
            sonar.projectName=ESF SignIn Frontend  // Variable As per requirment
            sonar.projectVersion=1.0 
            sonar.host.url=https://SonarQubeUrl  
            sonar.login=admin           
            sonar.password=********
            sonar.sources=. 
            sonar.language=JavaScript
            sonar.sourceEncoding=UTF-8
            '''
            sh 'ls -l gradle.properties'
            sh 'cat gradle.properties'
            }
        }
        stage ('Code analyse') {
          sh 'echo “Run some lints”'
        }
        stage ('Unit test') {
          sh 'echo “Tests will back”'
        }
        stage ('Build') {
          sh 'chmod +x gradlew'
          sh './gradlew clean assembleProdDebug'
       }
       stage ('Deploy') {
            steps{
                sshagent(credentials : ['Appstore']) {
                    sh 'scp DemoQc.apk support@RemortIp:PATH'
                }
            }
        }
    }
    post { 
        always { 
            cleanWs()
        }
    }
}


################ Jenkins file for Gradle build And Send APK to Remort Server  #############################

// SSH Pipeline Steps Plugin required for sshCommand

node {
   stage ('Clean Workspace'){
     sh 'pwd'
     sh 'ls -lrth'
     sh ' rm -rf *'
   }     
   stage ('Source Code Checkout') {
     git branch: 'Development', 
     url: 'git URL'
   }
  stage ('Code analyse') {
     sh 'echo “Run some lints”'
   }
  stage ('Unit test') {
     sh 'echo “Tests will back”'
   }
  stage ('Build') {
     sh 'chmod +x gradlew'
     sh './gradlew clean assembleProdDebug'
   }
  stage ('find And Rename Artifacts'){
     sh 'find ./ -type f -iname *.apk'
     sh 'mv app/build/outputs/apk/prod/debug/app-prod-debug.apk DemoQc.apk'
     sh 'ls -lrth'
   }
   def remote = [:]
    remote.name = 'USER'
    remote.host = 'IP'
    remote.user = 'USER'
    remote.password = 'PASSWORD'
    remote.allowAnyHosts = true
    stage('Remote SSH') {
      sshCommand remote: remote, command: "ls -lrt"
      sshPut remote: remote, from: 'DemoQc.apk', into: '/appstore/agileedge/int_files_download'
      sshCommand remote: remote, command: "cd /appstore/agileedge/int_files_download && ls -lrth"
      writeFile file: 'devscript.sh', text: '''sed -i "/<h4>DEV Builds<\/h4>/a                                                                         <a href="int_files_download/DemoDev.apk" target="_blank" data-role="button">Download Release 0.0.1</a>"  android.html'''
      sshPut remote: remote, from: 'devscript.sh', into: '/appstore/agileedge/'
      sshCommand remote: remote, command: "cd /appstore/agileedge && ls -lrth"
      sshScript remote: remote, script: "/appstore/agileedge/devscript.sh"
    }
   
}
