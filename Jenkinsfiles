########## Jenkins file for Run build on Agent  #########

pipeline {
  agent {
    label 'Ubuntu'  // Name of the Agent
    }
    stages {
        stage ('Source Code Checkout') {
           git branch: 'Development', 
           url: 'ssh://BitbucketURL'
        }

        stage('Prepare To Scan') {
          steps {
            writeFile file: 'gradle.properties', 
            text: 
            '''
            sonar.projectKey=SignIn-frontend    // Variable As per requirment
            sonar.projectName=ESF SignIn Frontend  // Variable As per requirment
            sonar.projectVersion=1.0 
            sonar.host.url=https://SonarQubeUrl  
            sonar.login=admin           
            sonar.password=********
            sonar.sources=. 
            sonar.language=JavaScript
            sonar.sourceEncoding=UTF-8
            '''
            sh 'ls -l gradle.properties'
            sh 'cat gradle.properties'
            }
        }
        stage ('Code analyse') {
          sh 'echo “Run some lints”'
        }
        stage ('Unit test') {
          sh 'echo “Tests will back”'
        }
        stage ('Build') {
          sh 'chmod +x gradlew'
          sh './gradlew clean assembleProdDebug'
       }
       stage ('Deploy') {
            steps{
                sshagent(credentials : ['Appstore']) {
                    sh 'scp DemoQc.apk support@RemortIp:PATH'
                }
            }
        }
    }
    post { 
        always { 
            cleanWs()
        }
    }
}


################ Jenkins file for Gradle build And Send APK to Remort Server  #############################

// SSH Pipeline Steps Plugin required for sshCommand

node {
   stage ('Clean Workspace'){
     sh 'pwd'
     sh 'ls -lrth'
     sh ' rm -rf *'
   }     
   stage ('Source Code Checkout') {
     git branch: 'Development', 
     url: 'git URL'
   }
  stage ('Code analyse') {
     sh 'echo “Run some lints”'
   }
  stage ('Unit test') {
     sh 'echo “Tests will back”'
   }
  stage ('Build') {
     sh 'chmod +x gradlew'
     sh './gradlew clean assembleProdDebug'
   }
  stage ('find And Rename Artifacts'){
     sh 'find ./ -type f -iname *.apk'
     sh 'mv app/build/outputs/apk/prod/debug/app-prod-debug.apk DemoQc.apk'
     sh 'ls -lrth'
   }
   def remote = [:]
    remote.name = 'USER'
    remote.host = 'IP'
    remote.user = 'USER'
    remote.password = 'PASSWORD'
    remote.allowAnyHosts = true
    stage('Remote SSH') {
      sshCommand remote: remote, command: "ls -lrt"
      sshPut remote: remote, from: 'DemoQc.apk', into: '/home/support'
      sshCommand remote: remote, command: "cd /home/support && ls -lrth"
      writeFile file: 'devscript.sh', text: '''sed -i "/<h4>DEV Builds<\/h4>/a                                                                         <a href="int_files_download/DemoDev.apk" target="_blank" data-role="button">Download Release 0.0.1</a>"  android.html'''
      sshPut remote: remote, from: 'devscript.sh', into: '/home/support'
      sshCommand remote: remote, command: "cd /home/support && ls -lrth"
      sshScript remote: remote, script: "/home/support/devscript.sh"
    }
   
}


################## RUN SONAR ANALYSIS FOR JAVA SCRIPT / PHP BASED PROJECT ###########################

def failureMessage = """The SonarQube analysis failed for the release/dev branch,Please go through the error in SonarQube dashboard and fix them. For now last commit was reverting."""

pipeline {
    agent {
    label 'master'
    }
    stages {
        stage('CleanWorkspace') {
            steps {
                sh 'ls -lrth'
                sh 'rm -rf *'
            }
        }    
        stage('SCM') {
            steps {
                git branch: 'BRANCH', 
                url: 'GIT URL'
            }
        }
        stage ('prepare for scan'){
          steps 
            {
               writeFile file: 'sonar-project.properties', 
               text: 
               '''
sonar.projectKey=SignIn-frontend
sonar.projectName=ESF SignIn Frontend
sonar.projectVersion=1.0
sonar.host.url=https://SONARQUBEURL  
sonar.login=admin           
sonar.password=PASSWORD
sonar.sources=. 
sonar.language=JavaScript
sonar.sourceEncoding=UTF-8
'''
               sh 'ls -l sonar-project.properties'
               sh 'cat sonar-project.properties'
            }
        }
        stage('SonarQube analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh 'sonar-scanner -Dsonar.branch.name=release/dev'
                }
            }
        }
        stage("Quality Gate"){
            steps {
                script {
                  timeout(time: 1, unit: 'HOURS') { 
                     def qg = waitForQualityGate()
                       if (qg.status != 'OK') {
                          error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        }
                   }    
                }  
           }
        }  
    }
    post { 
        success { 
            build job: 'BUILD PLAN NAME'
        }
        failure {
           echo """${failureMessage}"""
           sh 'git reset --hard HEAD@{1}' // IF YOU WANT TO REVERT THE LAST COMMIT
           sh 'git push -f'
        }
    }
}


######################### This pipeline helps send purge JSON againest HTTP request ###########
// Required plugin "Pipeline Utility Steps plugin" , "HTTP Request Plugin" , "Sonarqube" , "Sonarqube Quality Gate" 

pipeline {
    agent {
    label 'master'
    }
    stages {
        stage('CleanWorkspace') {
            steps {
                sh 'ls -lrth'
                sh 'rm -rf *'
            }
        }    
        stage('SCM') {
            steps {
                git branch: 'BRANCH', 
                url: 'GIT URL'
            }
        }
        stage ('prepare for scan'){
          steps 
            {
               writeFile file: 'sonar-project.properties', 
               text: 
               '''
                Write your text what you want to enter in sonar-project.properties file
               '''
               sh 'ls -l sonar-project.properties'
               sh 'cat sonar-project.properties'
            }
        }
        stage('SonarQube analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh 'sonar-scanner'
                }
            }
        }
        stage("Quality Gate"){
            steps {
                script {
                    sh "cat .scannerwork/report-task.txt"
                    def props = readProperties  file: '.scannerwork/report-task.txt'
                    echo "properties=${props}"
                    def sonarServerUrl=props['serverUrl']
                    def ceTaskUrl= props['ceTaskUrl']
                    def ceTask
                    timeout(time: 1, unit: 'MINUTES') {
                        waitUntil {
                            def response = httpRequest ceTaskUrl
                            ceTask = readJSON text: response.content
                            echo ceTask.toString()
                            return "SUCCESS".equals(ceTask["task"]["status"])
                          }
                    }
                    def response2 = httpRequest url : sonarServerUrl + "/api/qualitygates/project_status?analysisId=" + ceTask["task"]["analysisId"], authentication: 'JENKINS_CREDENTIAL_ID'
                    def qualitygate =  readJSON text: response2.content
                    echo qualitygate.toString()
                    if ("ERROR".equals(qualitygate["projectStatus"]["status"])) {
                        error  "Quality Gate failure"
                    }    
                }  
           }
        }  
    }
}

#####################RUN SONAR ANALYSIS FOR ANDROID BASED PROJECT#####################################

pipeline {
    agent {
    label 'master'
    }
    stages {
        stage('CleanWorkspace') {
            steps {
                sh 'ls -lrth'
                sh 'rm -rf *'
            }
        }    
        stage('SCM') {
            steps {
                git branch: 'release/dev',
                url: 'GIT_URL'
            }
        }   
        stage('SonarQube analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {
                   sh 'gradle sonarqube -Dsonar.branch.name=release/dev -Dsonar.branch.target=release/Qc'
                }
            }
        }
		stage("Quality Gate"){
            steps {
                script {
                  timeout(time: 1, unit: 'HOURS') { 
                     def qg = waitForQualityGate()
                       if (qg.status != 'OK') {
                          error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        }
                   }   
                }  
           }
        }
		stage ('Build') {
		     steps {
                sh 'chmod +x gradlew'
                sh './gradlew clean assembleDebug'
			}
        }
        stage ('find Artifacts'){
	    steps {
               sh 'find ./ -type f -iname *.apk'
               sh 'ls -lrth'
	      }
        }
        stage ('Publish Artifacts'){
	    steps {
               sh './gradlew :app:artifactoryPublish'
	     }
        }
    }
}

########################### ADD RUN TIME ENV #######################################

pipeline {
    agent {
    label 'master'
    }
    environment {
        DISABLE_AUTH = 'true'
        DB_ENGINE    = 'sqlite'
    }

    stages {
        stage('Build') {
            steps {
                sh 'printenv'
            }
        }
        stage('SonarQube analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {
                   sh 'pwd'
                   sh 'ls -lrth'
                   sh 'cat sonar-project.properties'
                   sh "sonar-scanner"
                }
            }
        }
        stage("Quality Gate"){
            steps {
                script {
                  timeout(time: 1, unit: 'HOURS') { 
                     def qg = waitForQualityGate()
                       if (qg.status != 'OK') {
                          error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        }
                   }   
                }  
           }
        }  
    }
}

###############################################################################################################


pipeline {
    agent any
	def server = Artifactory.newServer 'my-server-id'
    def rtGradle = Artifactory.newGradleBuild()
    def buildInfo
	
    stages {
        stage('Artifactory configuration') { 
            rtGradle.tool = GRADLE_TOOL // Tool name from Jenkins configuration
            rtGradle.deployer repo: 'libs-release-local', server: server
            rtGradle.resolver repo: 'jcenter', server: server 
            }
		
        stage('Exec Gradle') { 
            buildInfo = rtGradle.run buildFile: 'build.gradle', tasks: 'clean artifactoryPublish' 
            }

        }
    }



